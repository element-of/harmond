stringx = require "pl.stringx"
etlua   = require "etlua"

fin = io.open "modes_temp2.go", "r"

export Replies
Replies = {}

export Errors
Errors = {}

line = ""

while line
  line = fin\read "*l"
  break unless line

  if stringx.startswith line, "Rpl"
    table.insert Replies, {stringx.split(line, " ")[4]\sub(2,4), stringx.split(line, " ")[1]}

  else
    table.insert Errors, {stringx.split(line, " ")[4]\sub(2,4), stringx.split(line, " ")[1]}

template = assert etlua.compile [[ // Generated by generate_check.moon on <%- os.date() %>
// DO NOT EDIT BY HAND

package numeric

/*
IsError checks the Response and returns true if it is an error and false if it is not.
*/
func (r Response) IsError() bool {
  switch r {
    case <% for i, item in pairs(replies) do %> "<%= item[1] -%>" <% if i ~= #replies then %>,<% end %> <% end %>:
      return false
    case <% for i, item in pairs(errors) do %> "<%= item[1] -%>" <% if i ~= #errors then %>,<% end %> <% end %>:
      return true
    default:
      return false
  }
}]]

fout = io.open "replies_iserror.go", "w"
fout\write template {
  replies: Replies
  errors: Errors
}
fout\close!
